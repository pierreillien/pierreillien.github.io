import matplotlib.pyplot as plt
import numpy as np
from numpy import loadtxt
from numpy import random
from math import *
#import matplotlib.pylab as pl
#import re
#from scipy.special import *
#from scipy.integrate import quad

#import matplotlib

#from scipy.optimize import fsolve
#from scipy.optimize import curve_fit


### generate and save a set of data

data_x = np.linspace(0,10,50)
data_y = [sin(x) for x in data_x]
data = np.concatenate([[data_x],[data_y]]).T
np.savetxt('sinus.dat',data)


### plot data from a file

loaded_data = np.loadtxt('sinus.dat')
### open a figure window, numbered 1
plt.figure(1)
### plot with symbols
plt.plot(loaded_data[:,0],loaded_data[:,1], marker='^', linestyle='None', color='red',  label='symbols')
### plot with line
plt.plot(loaded_data[:,0],loaded_data[:,1], linestyle='solid', color='green',  label='line')

### name the axes
plt.ylabel('the y axis')
plt.xlabel('the x axis')

### give a title to the plot
plt.title('the title of the plot')

### place a legend
plt.legend(loc='lower left')
### additional commands to change the size of the legend font and to remove the frame around it
#plt.legend(loc='lower left', prop={'size': 9}, frameon=False)

### plot data from a function

def func(x):
    return exp(-x)


data_x = np.linspace(-2,1,50)

plt.figure(2)
plt.plot(data_x,[func(x) for x in data_x], marker='*', color='orange',  label='symbols')
plt.plot(data_x,[func(x) for x in data_x], linestyle='dashed', color='violet',  label='line')
### use a log scale for the y axis
plt.yscale('log')
plt.ylabel('the y axis')
plt.xlabel('the x axis')
plt.title('the title of the plot')
plt.legend(loc='upper right')


### plot a histogram

# generate 1000 values of a random variable distributed according to a normal law of mean 2.0 and variance 1.0
random_data = np.random.normal(2.0, 1.0, 1000)
plt.figure(3)
plt.hist(random_data,20)
plt.ylabel('occurences of x')
plt.xlabel('x')
plt.title('some histogram')



### optional command to make the size of the window and of the exported file correspond to the actual plot and axes
# plt.tight_layout()
### command to export as pdf (other possible formats)
# plt.savefig('name_of_the_file.pdf')

### command to display all the figures that were generated by the script
plt.show()
